代码生成器(只适用于单表的。生产完之后把代码放到指定目录。用于生成代码的项目就可以删掉了)
AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成
Entity实体类、Mapper接口、Mapper XML文件、Service层、Controller层 等各个模块的代码，极大的提升了开发效率。

1.导入代码生成的项目
2.修改生成后的代码存放的路径，包名的配置，模块名的配置，数据源的配置
  包名的配置，模块名的配置 可以和真正的项目一样，到时候直接复制到真正的项目即可
3.classpath下的freemarker模板不用改




API接口文档Swagger
0.在父工程中指定jdk编译时的版本(因为：有时候项目clean之后会改变版本)(3.2的Maven我的加上反而报错了,用3.1可以)
1.在huiminpay_merchant_api中引入common项目坐标
  (因为_api中需要swagger，application中也需要swagger。application中引入了_api,也就相当于有了common)

2.在huiminpay-common项目中添加依赖，只需要在huiminpay-common中进行配置即可，
  因为其他微服务工程都直接或间接依赖huiminpay-common。
一个核心包springfox-swagger2，一个ui前端界面包springfox-swagger-ui

3.在huiminpay_merchant_application项目中写Swagger的配置类(@Configuration让spriongboot可以扫描到)
  配置类要加@EnableSwagger2，进行开启Swagger
  复制该配置：只需要改变apiInfo和包路径即可

    常用Swagger注解如下：
    @Api：修饰整个类，描述Controller的作用
    @ApiOperation：描述一个类的一个方法，或者说一个接口
    @ApiParam：单个参数的描述信息
    @ApiModel：用对象来接收参数
    @ApiModelProperty：用对象接收参数时，描述对象的一个字段
    @ApiResponse：HTTP响应其中1个描述
    @ApiResponses：HTTP响应整体描述
    @ApiIgnore：使用该注解忽略这个API
    @ApiError ：发生错误返回的信息
    @ApiImplicitParam：一个请求参数
    @ApiImplicitParams：多个请求参数的描述信息

4.添加SpringMVC类：WebMvcConﬁg，让外部可直接访问Swagger文档
  配置静态页面的访问地址，把静态资源给放过
  是固定写法,写一个类实现WebMvcConfigurer

5.开始使用Swagger的注解
   1.在MerchantController类加注解 @Api(value = "商品应用API接口",description = "商品应用API接口,包含增删改查功能")
     进行对类的描述
   2.在MerchantController类的方法上加@ApiOperation(value = "根据商铺的id获取商铺信息")，进行对方法的描述
   3.接着在方法上加注解进行参数的描述
      @ApiImplicitParams(                //required = true代表是一个必填项
                  {
                  @ApiImplicitParam(name = "merchantId",value="商铺id",required = true,dataType = "long"),
                  //如果有多个参数就这样加
                  @ApiImplicitParam(name = "merchantName",value="商铺名称",required = false,dataType = "string")
                  }
          )
6.@GetMapping("/queryMerchantById/{merchantId}/{merchantName}")

需要@ApiImplicitParam的name属性与Restful风格的访问值一样，这样才能在页面中只显示一个同样的参数框

7.访问swagger-ui的路径为 http://localhost:57010/swagger-ui.html 传入基本类型进行查询操作

8.演示swagger-Ui通过传入对象进行操作
  1.在Api的实体类上加 @ApiModel(description = "商铺实体类对象")  描述实体类
  2.在Api的实体类的属性上加 @ApiModelProperty("商户名称") 描述实体类的一个字段
  3.在_application中的另一个方法上加
    @ApiOperation(value = "根据传递的merchant信息返回结果")
        @PostMapping("/queryByMerchant")
        public String query(Merchant merchant){}






把项目里写的配置迁移到Nacos中
1.nacos中新建命名空间huiminpay-dev
2.在huiminpay-dev中新建主配置文件 	merchant-application.yaml
3.在application的yml中，指定nacos的服务发现为新建命名空间，指定配置文件
4.要保证service的服务和application的服务在同一命名空间，所以service也进行相同的操作(不进行3操作，默认是public的空间)

再访问application时就加上nacos的merchant-application.yaml中配置的`/merchant`
变成 http://localhost:57010/merchant/merchant/queryMerchantById/1/0

配置扩展文件：通常扩展文件都是通用的一些配置
如果扩展文件与主配置文件有相同的配置信息时，主配置文件可以对扩展配置文件进行覆盖
如果扩展文件与主配置文件的配置信息不相同的时，就能一起使用不会覆盖
1、在huiminpay-dev中新建扩展配置文件 spring-boot-http.yaml
2、在application的yml中，配置扩展配置文件
           ext-config:
           -
             data-id: spring-boot-http.yaml
             group: COMMON_GROUP
             refresh: true
3、把主配置文件的路径配置去掉,就会用从配置文件中配置的路径
   http://localhost:57010/exten/merchant/queryMerchantById/1/0

如果访问swagger-ui 也需要加上配置的路径/merchant(主配置文件配置的路径) http://localhost:57010/merchant/swagger-ui.html
                                    /exten(从配置文件配置的路径)  http://localhost:57010/exten/swagger-ui.html

这个访问路径的配置(对于相同的配置)。nacos的主配置和从配置都会覆盖本地的配置，nacos的主配置又会覆盖nacos的从配置。
本地的配置和nacos的主配置和从配置都不一样时才会用本地的配置
真正访问的路径在上面的基础上再加上controller中的路径
server:
  servlet:
    context-path: /merchant1


mybatis-plus的使用
引入mybatis-plus-boot-starter，api里写mapper接口，extends BaseMapper<XX>  yml文件也要配置

mybatis-plus主键生成策略(在测试类中演示的)
1.在service中引入测试包 spring-boot-starter-test
2.建包,写测试类@RunWith(SpringRunner.class)
              @SpringBootTest
3.注入Mapper接口，使用Mybatisplus中的insert方法，即可插入数据
    //mybatis-plus默认主键生成策略：
    //如果不做任何主键策略配置，默认使用的是雪花算法生成主键ID(主键类型为Long或String，对应MySQL数据库
    //                                                    就是BIGINT和VARCHAR)
    //需要Mapper对象继承BaseMapper<Merchant>
    //插入的数据如果不设置主键，插入后再打印此对象，就会自动回显默认生成的主键
    //插入的数据如果设置了主键，插入后再打印此对象，就会自动回显自己设置的主键

    //如果用UUID生成主键，要求主键的类型是VARCHAR

    //mybatis中进行添加数据时，XML文件sql中 useGeneratedKeys="true"开启主键回写，才可以进行主键回显
    //mybatis-plus中会自动进行回显


(在测试类中演示的)
使用mybatis-plus情况下数据库字段与实体类字段映射
java中实体类字段的命名是驼峰命名的 如merchantName
数据库字段的命名是用下划线连接命名的 如MERCHANT_NAME

在名字一样时(形式不一样)使用mybatis可以自动把两种不同的形式( java实体类字段驼峰和数据库下划线的映射)做映射。因为
mapUnderscoreToCamelCase是否开启自动驼峰命名规则（camel case）映射，在MyBatis-Plus中此属性默认值为true
- 类型：   boolean
- 默认值： true

在service的yml文件中可以通过此进行设置，为false后，由于名字不对应就不能自动完成映射((除非java实体类字段和数据库的名字一致才可以映射))
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false  //java实体类字段驼峰和数据库下划线的映射，true开启，false关闭


自动映射对了，就不用按下面的写法(自动映射对了，下面的写不写都行，不影响映射)
(在不写mapper配置文件的情况下)如果数据库的字段aa和java实体类的字段名字bb的单词不一致时(不像上面只是形式不一样)，
或者在map-underscore-to-camel-case: false时
可以在实体类上加注解进行对应.
@TableName("merchant")            //实体类要映射那张表
@TableId("id")                    //实体类要映射表中的主键为(id)哪个
@TableField("merchant_name")      //实体类要映射表中的字段


mysql数据库需要用代码生成UUID再添加进主键中,uuid不可以直接作为列的值
oracle数据库可以用主键字段可以直接使用UUID，uuid可以直接作为列的值

但是可以通过@TableId("id") 对实体类进行设置，就不需要在业务层生成new uuid()了
@TableId(value = "id",type = IdType.UUID) 对主键是string类型时，还可以设置uuid自动生成


mybatis-plus简单查询(在测试类中演示的)
1.new 用Wrapper的子类QueryWrapper
2.用QueryWrapper设置过滤规则(查询规则)
3.mapper接口对象调用方法，传入wrapper的子类



mybatis-plus分页查询(在测试类中演示的)
1、先在service中用配置类，配置分页插件的拦截器(不配置不行)
2.按照mybatis-plus的分页代码流程进行






惠民支付验证码服务
这是一个第三方项目sailing，需要下载下来，在本地启动起来
需要启用redis，发送的验证码要存入redis中。因为手机验证码是有时效性的，需要有一个过期时间
1.通过git下载验证码的项目 git clone https://gitee.com/qawine_base/sailing.git
2.把yml文件中的redis密码注释掉，自己没有密码
3.启动启动类，访问http://localhost:56085/sailing/swagger-ui.html
4.访问生成验证信息的方法：
         填写验证信息有效期
         业务名称为: sms
         业务携带参数(mobile为后台接收的名字): {"mobile":18239717831}
5.发送成功后下面会出现一个key  "key": "sms:50c5d5c5185a49e3b2f468e9fdb3786a"
  验证码发送到了sailing项目的控制台中
6.redis会把生成的验证码用key value的形式存储
  key就是：在redis的客户端输入`keys *`可以看到与swagger-ui中一样的key。"sms:50c5d5c5185a49e3b2f468e9fdb3786a"
  value就是：发送的验证码898931
7.访问校验的方法
   业务名称为:  sms
   填写验证码:  898931
   填写key:    sms:50c5d5c5185a49e3b2f468e9fdb3786a
 key和验证码对应时result为true


在惠民支付中调用sailing
在测试类中测试短信的发送
1.在测试类中需要先导测试的包
2.设置sailing项目需要的参数，用远程调用去调用

真正用业务实现短信发送的接口
1.huiminpay_merchant_api中定义接口
 接口中定义获取验证码的方法
 接口中定义验证码校验的方法
2.huiminpay_merchant_service中定义类SmsServiceImpl实现该接口，用dubbo下的service注解
  分别对两个方法进行业务的处理
3.在controller层， @Reference注解注入进来SmsService
   定义方法，调用接口实现类中的方法


对各层实体类的说明
数据层                业务层
只针对数据库使用的     拿到的数据有前端传递的数据，从数据库获取的数据(对数据层的实体类做扩展)
Merchant             MerchantDto

控制层
主要是与前端进行交互的，可以根据业务需求变化，传递不同的信息(又在业务层的实体类上做扩展)
MerchantVo


实现商户注册的功能
1.在api中建实体类dto下的MerchantDto
2.MerchantService接口中定义商户注册方法
  (直接去对数据层的字段进行添加的话，由于用的是mybatis-plus，默认对全部的字段进行查询，就会报错
   用自己定义MerchantDto就不会有问题，它不是用于和mapper对应的)
3.MerchantServiceImpl重写方法，写商户注册的业务
4.application中建实体类vo下的MerchantVo(可以只定义只前端传递过来的参数，不用比MerchantDto的字段多)
5.application中MerchantController中定义商户注册的方法

6.该注册方法先对验证码进行校验
   在SmsServiceImpl中的方法中写校验的业务
   再在MerchantController中商户注册的方法中引入
7.商户注册的方法实现注册的业务




对项目的架构自行进行了改造，改造的内容有
1.api层不再定义Merchant实体类，放到Service层的entity包中
2.把原先在api层调用的数据库层的jar包依赖也放入Service中，实现在Api层中只定义接口
3.由于对实体类进行位置的改动，有些方法需要重新引入该类。
4.service层中的有些方法从Merchant改变成了MerchanDto，Application层引用该方法时，需要对这些方法的返回值，方法的参数做出改变
5.由于application层中引入的api层中没有数据库的jar包，所以在application的启动类中也不需要排除这些依赖了
6.sailing的服务放在application中，因为放在service层中还需要在调用一次


VO层的参数要自定义成和前端表单提交的数据数量一致即可




使用BeanUtils进行对象转换
如：BeanUtils.copyProperties(merchantVo,merchantDto);

也可以用 --> MapStruct对象转换
1.在common中引入mapstruct-jdk8，mapstruct-processor。排除掉swagger中的mapstruct
2.写转换器，基本上每层都涉及所以那里需要就在那层写转换器
3.调用该转化器完成对象的转换


全局异常处理
1.huiminpay_common中定义自定义异常类 BusinessException
2.可以针对application层的异常，全部被一个异常捕获类捕获，就是每层都有一个异常捕获类
  (异常捕获类也可以写在common中，所有层共用一个异常捕获类)
3.在知道自己有可能出现异常的地方(设置异常类的参数并)抛出自己定义的异常类 BusinessException
  (也可以自己设置一个工具类ExceptionCast，对抛的异常进行封装再执行)



先是商户注册，再是商户资质申请，资质申请成功后创建商户应用(可以有多个，就可以选择第三方服务类型)

商户资质申请
说明：资质的审核我们没有做，需要调华为的接口，只完成资质图片上传到七牛云和基本信息存入数据库
流程：通过前端页面上传信息(有普通文本，有图片文件上传)-->选择要上传的图片后就到商户应用平台  -->就直接上传到七牛云,保存图片 -->七牛云返回一个图片的标识(也就是文件的新名称)给商户应用平台application层 -->返回给前端页面一个该图片的绝对路径，也叫证件标识(是七牛云中自己的存储空间的网址加上图片的标识)，通过这个证件标识就可以访问到七牛云中保存的图片了-->当点击提交时，就会把该路径保存到自己的数据库中
                                                |  (多张图片就会上传多次，可以在application中定义service包，写业务调用第三方服务。图片上传就不经过商户服务service层了，在不和数据库打交道，直接和第三方服务交互，就可以跨过service层，避免了多次远程调用)
                                                |
                                                |
                                                |
                                                -->其他信息在点击提交时才到商户应用平台(这其中包含了上传的图片的绝对路径)-->调用service保存数据-->返回给商户应用平台application-->返回给前端申请成功

七牛云
上传文件测试
1.先登陆七牛云创建存储空间，会自己生成一个域名 qzb94fiyp.hb-bkt.clouddn.com
    如果往这个空间存储文件那么下载的地址就是：域名+生成的文件名，如：http://qzb94fiyp.hb-bkt.clouddn.com/FltRDkM5jalyG6b7Uvl9vOeLO4hQ
2.测试环境可以不用先绑定域名
3.代码里的配置类要选你自己创建空间时选的华南，华北的代用名。
     如华北的两个都能用Region.region1(), Region.huabei()。华南的两个Region.region2(), Region.huanan()
     我的是华北的
  代码里需要的bucket：就是自己创建的空间名
  公钥和私钥：点击头像-->密钥管理

4.把上传所需的jar包放在common中方便其他服务也能使用
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>7.2.25</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
5.在common中写个test测试一下代码(在这里面有几个参数需要自己设置)，方便抽取工具类
  从官网中复制代码 可选用文件上传\字节数组上传\数据流上传中的任一种
  这里用字节数组上传，并修改成自己的参数(地区，空间名，公钥，私钥，自己要上传文件的字节数组)
6.在官网的huiminpayguanshan空间的文件管理中就可以看到自己上传的文件了

七牛云下载文件测试
1.从官网拷贝代码到测试类 （找的私有空间的手动拼接方式）




阿里云的使用
1.先注册，实名认证，再创建空间
2.在common中引入阿里云的jar包
  <dependency>
      <groupId>com.aliyun.oss</groupId>
      <artifactId>aliyun-sdk-oss</artifactId>
      <version>3.10.2</version>
  </dependency>
3.地区，空间名，公钥，私钥，自己要上传文件的字节数组都跟七牛云有所不同

阿里云下载文件测试（以下载到本地文件为例）
1.从官网拷贝代码到测试类 （找的私有空间的手动拼接方式）


七牛云对接项目，不仅上传基本信息还要上传使用common中的工具类完成图片上传返回的路径
1.把公钥私钥等信息配置到nacos中,在application的bootstrap中引入该扩展配置
2.MerchantController中写调用
3.在application中的MerchantService中使用common中的工具类调用七牛服务
4.最后返回云上文件的路径名给前段

商户资质申请又是另外一个接口
1.在MerchantController定义方法。访问此方法时携带一个令牌，在此方法中从令牌中解析出merchantId
2.在MerchantServiceApi中写接口
3.在MerchantServiceImpl中实现接口的方法
4.用postman工具在头上带信息(就是令牌)进行访问MerchantController中的方法(因为swagger头上不好带信息)
  工具类获取的头信息的键是authorization，所以postman设置头信息时用authorization作为键，令牌当作值
  令牌现在是自己用数据库存在的数值制成的(开发不这样用)

  再设置body体
  用json把数据传到后台，用@RequestBody把json串转换成MerchantDto对象
  用了@RequestBody后swagger的参数就会变成json的形式，然后复制到postman的body体中

    json字符串中：
       id不用传，系统的令牌中获取
       auditStatus是系统内部改的不用传递
       mobile根据业务判断传不传，如果需要和注册时一样，可以从令牌中获取
       如果传进去的某个字段是空值，则在更新数据时，若此字段有值则不会覆盖掉(不会直接把null值放到数据库)




小说明
@Transactional
放在service层的方法上，方法进行了事务管理
放在类上，其中的方法都被事务进行管理，再在方法上加@Transactional(readOnly=true)可以覆盖类上的事务,代表此方法是对数据库的操作是只读的

可重复读的隔离级别：在读的过程中数据不会被更改，读完了才允许其他的更改操作
根据项目的具体业务决定用什么级别

不可重复读是因为在一个事物中执行多次相同的查询，可能会得到不一样的结果。因为在这多次读之间可能有其他事务更改这个数据，每次读到的数据都是已经提交的
如何避免了这个问题呢？原来是因为事物在执行查询时，对检索的数据（范围性）都加了行锁（LOCK），这样其他事物就无法对这些加了锁的数据进行更改，自然避免了同一事物多次查询数据不一致的问题







新章节
支付参数配置。是给应用配置参数。
先要创建应用，再给应用绑定惠民支付平台的支付渠道的服务类型,根据所绑定的服务类型为应用配置第三方支付渠道的参数
所以顾客的每次支付都隶属于某个应用。

                                                                                                              --app
                                                                                       |---(服务类型)线上支付--|
                                                                                       |                      --H5
一个商户先创建应用(可以有多个应用)(应用是商户在惠民支付平台创建的业务标识，就是不同的商业业务)--
                                                                                       |                                                                       --(服务类型)B扫C 商家扫客户  进行选择几种支付方式,配置支付渠道参数
                                                                                       |---(服务类型)线下支付(我们配置的支付渠道方式以线下C扫B为例，       ---------|
                                                                                                   从惠民平台对接过的支付渠道选取渠道进行配置服务类型，             |
                                                                                                   可以配置多个支付渠道，合成一张二维码或者都能扫的枪)              |
                                                                                                                                                               --(服务类型)C扫B 客户扫商家 进行选择那几种支付方式，生成一个二维码
用户通过惠民支付平台完成支付，惠民支付平台最终会请求第三方支付渠道完成支付
商户不仅是惠民平台的商户，还是第三方支付机构的商户，商户要使用惠民支付平台就需要开通微信、支付宝等支付渠道，然后在惠民支付平台配置支付渠道参数
顾客扫描对影视业务生成的二维码-->惠民支付平台-->判断是支付宝扫码还是微信扫码-->获取该支付渠道参数-->通过交易代理服务调取相应的第三方支付服务接口-->如果是支付宝的扫的钱就会进入影视业务的支付宝下



创建应用的流程：
前端请求(商户创建应用的请求)-->商户平台应用(请求保存应用的信息)-->商户服务(校验：商户是否存在(从令牌中获取商户ID)，应用是否重名)
返回给前端应用创建成功的信息-->返回给商户平台应用创建成功的信息<--        (保存：商户应用信息)
1.先用代码生成器生成实体类，DTO，实体类的mapper接口
2.AppServiceApi中定义添加应用的方法 ，要抛自定义的异常
3.AppServiceImpl继承并重写AppServiceApi的方法 ，如果接口中的方法抛了异常，实现类重写的方法可以不用写抛异常(相当于抛了)
4.在AppController注入AppServiceApi,定义方法
5.使用postMan时，设置的头信息要勾选上，Content-Type类型也要勾选上



@ApiImplicitParam中的属性paramType的取值
path  代表的是获取从地址栏用restful风格传的参数
query 代表的是获取从地址栏用?key=value的形式传的参数
body  代表的是获取从form表单的形式传的参数

有图片等文件上传时用@ApiParam   它好像不能用dataType属性
一般的表单上传用@ApiImplicitParam

查询应用的流程，两个接口：
根据自己的商户id查询本商户下的应用，根据应用id查询应用的详细信息



//QueryWrapper查询的3种方式
非lambda的查询形式
List<App> apps = appMapper.selectList(new QueryWrapper<App>().eq("MERCHANT_ID", merchantId));
用lambda表达式的两种形式
List<App> apps1 = appMapper.selectList(new QueryWrapper<App>().lambda().eq(App::getMerchantId, merchantId));
List<App> apps2 = appMapper.selectList(new LambdaQueryWrapper<App>().eq(App::getMerchantId, merchantId));





支付渠道参数配置
有以下几个接口，商户应用平台与交易服务交互(换服务了，不用商户的服务了)，服务拆开了数据库也拆开了
    获取平台服务类型                         对应huiminpay_transaction库中的platform_channel表
    把查询出来的服务类型给应用绑定服务类型      添加记录到应用和服务类型绑定的表app_platform_channel
    查询支付渠道                             pay_channel支付渠道表
                                            platform_pay_channel表：每种服务类型有几种支付渠道
                                                  pay_channel表和platform_pay_channel表结合起来确定一个服务类型能配置的渠道
    给应用配置支付渠道参数                    对每个所选的支付渠道进行配置参数
                                            配置的支付渠道参数到pay_channel_param表中


